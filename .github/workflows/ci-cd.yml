name: PR – Test and Build (No Secrets)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: 🛎️ Checkout PR code
      uses: actions/checkout@v3

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📦 Install dependencies
      run: |
        echo "::group::Installing dependencies"
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest
        echo "::endgroup::"

    - name: 🧹 Lint code
      run: |
        echo "::group::flake8"
        flake8 .
        echo "::endgroup::"

        echo "::group::black"
        black --check .
        echo "::endgroup::"

        echo "::group::isort"
        isort --check-only .
        echo "::endgroup::"

    - name: 🧪 Run tests
      run: |
        echo "::group::pytest"
        pytest
        echo "::endgroup::"

    - name: 🧼 Remove existing Docker image (optional)
      run: |
        echo "::group::Remove old image"
        docker rmi housing-api:pr-${{ github.event.pull_request.number }} || true
        echo "::endgroup::"

    - name: 🛠️ Build Docker image
      run: |
        echo "::group::Build Docker image"
        docker build -t housing-api:pr-${{ github.event.pull_request.number }} .
        echo "::endgroup::"

    - name: 🔐 Log in to Docker Hub
      run: |
        echo "::group::Login to Docker Hub"
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        echo "::endgroup::"

    - name: 🚀 Tag and Push Docker image
      run: |
        echo "::group::Push Docker image"
        IMAGE_TAG=${{ github.event.pull_request.number }}
        docker tag housing-api:pr-${IMAGE_TAG} ${{ secrets.DOCKER_USERNAME }}/housing-api:pr-${IMAGE_TAG}
        docker push ${{ secrets.DOCKER_USERNAME }}/housing-api:pr-${IMAGE_TAG}
        echo "::endgroup::"

    - name: 🧪 Run container and call /metrics-json
      run: |
        echo "::group::Run Docker container"
        docker run -d -p 8000:80 --name housing-api housing-api:pr-${{ github.event.pull_request.number }}
        echo "::endgroup::"

        echo "::group::Call /metrics-json"
        sleep 5
        echo "⏳ Waiting for the container to start..."
        if RESPONSE=$(curl --retry 5 --retry-delay 2 --silent http://localhost:8000/metrics-json); then
          echo "✅ /metrics-json endpoint response:"
          echo "$RESPONSE"
        else
          echo "❌ Failed to reach /metrics-json endpoint"
          docker logs housing-api
          exit 1
        fi
        echo "::endgroup::"
