name: CD + Conditional Retrain on Main Push

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check_changes:
    name: üîç Check What Changed
    runs-on: ubuntu-latest
    outputs:
      data_changed: ${{ steps.check.outputs.data_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for changes in data or training code
        id: check
        run: |
          git fetch origin main --depth=2
          FILES=$(git diff --name-only HEAD^ HEAD)
          echo "Changed files:"
          echo "$FILES"

          if echo "$FILES" | grep -E '^(data/|src/(preprocess\.py|train\.py))'; then
            echo "‚úÖ Detected data/training-related changes"
            echo "data_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "‚ÑπÔ∏è No data/training-related changes"
            echo "data_changed=false" >> "$GITHUB_OUTPUT"
          fi

  retrain:
    name: ü§ñ Retrain Model (if needed)
    needs: check_changes
    if: needs.check_changes.outputs.data_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Preprocessing
        run: python src/preprocess.py

      - name: Train Model
        run: python src/train.py

      - name: Upload trained model and scaler
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            models/best_model.pkl
            models/scaler.pkl

  cd:
    name: üöÄ Deploy Docker Image
    needs: check_changes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t housing-api:main .

      - name: Tag and push Docker image
        run: |
          docker tag housing-api:main ${{ secrets.DOCKER_USERNAME }}/housing-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/housing-api:latest

      - name: Run container and call /metrics-json
        run: |
          docker rm -f housing-api || true
          docker run -d -p 8000:80 --name housing-api housing-api:main
          sleep 5
          if RESPONSE=$(curl --retry 5 --retry-delay 2 --silent http://localhost:8000/metrics-json); then
            echo "‚úÖ /metrics-json endpoint response:"
            echo "$RESPONSE"
          else
            echo "‚ùå Failed to reach /metrics-json endpoint"
            docker logs housing-api
            exit 1
          fi
